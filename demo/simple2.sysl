# This project tells our integration diagram what apps to include

MobileApp:
    @package = "ApplicationPackage"
    @description = "this is a comment for MobileApp"
    Login(input <: Server.Request):
        @description = "hello, gamers"
        Server <- Authenticate
        return ok <: MegaDatabase.Empty
    Another:
        @description = "hello, world"
        return ok <: Server.Response
MobileApp2:
    @package = "ApplicationPackage"
    @description = "this is a comment for MobileApp"
    SecondEndpoint(input <: Server.Request):
        @description = "SecondEndpoint, comment"
        Server <- Authenticate
        return ok <: MegaDatabase.Empty
    ThirdEndpoint:
        @description = "ThirdEndpoint comment"
        return ok <: Server.Response

Server:
    @package = "ServerPackage"
    @description = "this is a comment for Server"
    !type Response:
        @description="Response Response Response"
        query <: MegaDatabase.Money
        balance <: MegaDatabase.Empty
    !type Request:
        @description="Request Request Request"
        query <: sequence of Response
    !type Empty[~empty]:
        @description="Empty Empty Empty"
        ...

    Authenticate(input <: Request):
        @description = "this is a description of Authenticate"
        return ok <: Response
    
    /testRestURLParam/{id<:Request}:
        GET:
            return ok <: Response
    
    /testRestQueryParam:
        GET ?queryString={Request}&secondQueryString={Request}:
            return ok <: Response

    /testRestQueryParamPrimitive:
        GET ?queryPrimitiveString=string:
            return ok <: Response

    /testRestPathParamPrimitive/{primitiveID<:string}:
        GET:
            return ok <: Response

    /testReturnNil:
        GET:
            return Empty

# This is an example of apps with types made up of different apps
MegaDatabase:
    # This was meant to be an example of how different applications can be in the same package
    @package = "ServerPackage"
    !type Empty[~empty]:
        @description="Empty Empty Empty"
        ...
    !type Money:
        @description="Money Money Money"
        amount <: int
RelModel[~db]:
    @package="ServerPackage"
    !table exhibition:
        exhibition_id <: int [~pk]
        time <: DATETIME
        capacity <: int
    !table audio_guide:
        audio_guide_id <: int [~pk]
        type <: float
        activation_date <: date
        listen_time <: float
        payment <: payment_details.payment_details_id
        language <: float
        ticket_id <: ticket.ticket_id
        issue_point <: location.location_id
        return_point <: location.location_id
    !table ticket:
        ticket_id <: int [~pk]
        payment <: payment_details.payment_details_id
        checkpoints <: checkpoint_lookup.checkpoint_lookup_id
        arrival_transport <: float
        exhibition <: exhibition.exhibition_id
    !table checkpoint_lookup:
        checkpoint_lookup_id <: int [~pk]
        location <: location.location_id
    !table location:
        location_id <: int [~pk]
        type <: float
        time <: DATETIME
        name <: float
    !table payment_details:
        price <: decimal
        payment_details_id <: int [~pk]
        type <: float
        online <: bool
        payment_cash <: cash_payment.id
        payment_card <: card_payment.id
    !table cash_payment:
        id <: int [~pk]
        first_name <: string
        city <: string
        country <: string
    !table card_payment:
        id <: int [~pk]
        bank_name <: string
        bank_short_name <: string
        branch <: string
        expiry <: string
        card_number_snippet <: string
